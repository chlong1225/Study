package com.demo.algorithm.leetcode.contest.doubleweek75;

/**
 * Created by chl on 2022/4/12.
 * description : 选择建筑的方案数
 *
 * 给你一个下标从0开始的二进制字符串s，它表示一条街沿途的建筑类型，其中：
 * s[i]='0'表示第i栋建筑是一栋办公楼，
 * s[i]='1'表示第i栋建筑是一间餐厅。
 * 作为市政厅的官员，你需要随机选择3栋建筑。然而为了确保多样性，选出来的3栋建筑相邻的两栋不能是同一类型。
 * 比方说，给你s = "001101"，我们不能选择第1，3和5栋建筑，因为得到的子序列是"011"，有相邻两栋建筑是同一类型，所以 不合题意。
 * 请你返回可以选择3栋建筑的有效方案。
 *
 * 示例 1：
 * 输入：s = "001101"
 * 输出：6
 * 解释：
 * 以下下标集合是合法的：
 * - [0,2,4] ，从 "001101" 得到 "010"
 * - [0,3,4] ，从 "001101" 得到 "010"
 * - [1,2,4] ，从 "001101" 得到 "010"
 * - [1,3,4] ，从 "001101" 得到 "010"
 * - [2,4,5] ，从 "001101" 得到 "101"
 * - [3,4,5] ，从 "001101" 得到 "101"
 * 没有别的合法选择，所以总共有 6 种方法。
 *
 * 示例 2：
 * 输入：s = "11100"
 * 输出：0
 * 解释：没有任何符合题意的选择。
 *
 * 提示：
 * 3 <= s.length <= 10^5
 * s[i]要么是'0'，要么是'1'。
 */
public class NumberOfWays {

    public long numberOfWays(String s) {
        /**
         * 有效的方案只有两种：010，101。可以对两种分别使用动态规划
         */
        int length = s.length();
        //1，先统计010场景
        long[] marks = new long[4];
        for (int i = 0; i < length; i++) {
            if (s.charAt(i) == '0') {
                //从""转换到"0"
                marks[1]++;
                //从"01"转换到"010"
                marks[3] += marks[2];
            } else {
                //只能从"0"转换为"01"
                marks[2] += marks[1];
            }
        }
        long sum = marks[3];
        //2，统计101场景
        marks[1] = 0;
        marks[2] = 0;
        marks[3] = 0;
        for (int i = 0; i < length; i++) {
            if (s.charAt(i) == '0') {
                //只能从"1"转换为"10"
                marks[2] += marks[1];
            } else {
                //从""转换为"1"
                marks[1]++;
                //从"10"转换为"101"
                marks[3] += marks[2];
            }
        }
        sum += marks[3];
        return sum;
    }
}
