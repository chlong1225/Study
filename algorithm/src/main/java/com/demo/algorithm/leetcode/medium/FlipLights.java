package com.demo.algorithm.leetcode.medium;

/**
 * create on 2022/9/15
 * @author chenglong
 * description : 灯泡开关Ⅱ
 *
 * 房间中有n只已经打开的灯泡，编号从1到n。墙上挂着4个开关 。
 * 这4个开关各自都具有不同的功能，其中：
 * 开关 1 ：反转当前所有灯的状态（即开变为关，关变为开）
 * 开关 2 ：反转编号为偶数的灯的状态（即 2, 4, ...）
 * 开关 3 ：反转编号为奇数的灯的状态（即 1, 3, ...）
 * 开关 4 ：反转编号为 j = 3k + 1 的灯的状态，其中 k = 0, 1, 2, ...（即 1, 4, 7, 10, ...）
 * 你必须恰好按压开关presses次。每次按压你都需要从4个开关中选出一个来执行按压操作。
 * 给你两个整数n和presses，执行完所有按压之后，返回不同可能状态的数量。
 *
 * 示例 1：
 * 输入：n = 1, presses = 1
 * 输出：2
 * 解释：状态可以是：
 * - 按压开关 1 ，[关]
 * - 按压开关 2 ，[开]
 *
 * 示例 2：
 * 输入：n = 2, presses = 1
 * 输出：3
 * 解释：状态可以是：
 * - 按压开关 1 ，[关, 关]
 * - 按压开关 2 ，[开, 关]
 * - 按压开关 3 ，[关, 开]
 *
 * 示例 3：
 * 输入：n = 3, presses = 1
 * 输出：4
 * 解释：状态可以是：
 * - 按压开关 1 ，[关, 关, 关]
 * - 按压开关 2 ，[关, 开, 关]
 * - 按压开关 3 ，[开, 关, 开]
 * - 按压开关 4 ，[关, 开, 开]
 *
 * 提示：
 * 1 <= n <= 1000
 * 0 <= presses <= 1000
 */
public class FlipLights {

    public int flipLights(int n, int presses) {
        //1，分场景讨论
        if (presses == 0) {
            //按钮的次数为0时，此时只有原始状态1种
            return 1;
        }
        if (n == 1) {
            //一个灯最多的有效组合为2
            return 2;
        }
        if (n == 2) {
            //最多的有效组合为4
            if (presses == 1) {
                return 3;
            } else {
                return 4;
            }
        }
        //n超过3时有效的组合最多为8
        if (presses == 1) {
            return 4;
        }
        if (presses == 2) {
            return 7;
        }
        return 8;
    }
}
